using System;
using Entities;
using ServiceContracts.DTO;
using ServiceContracts;
using System.ComponentModel.DataAnnotations;
using Services.Helpers;
using ServiceContracts.Enums;

namespace Services
{
    public class PersonsService : IPersonsService
    {
        //private field
        private readonly List<Person> _persons;
        private readonly ICountriesService _countriesService;

        //ctor
            public PersonsService(bool initialize = true)
            {
                _persons = new List<Person>();
                _countriesService = new CountriesService();

            if (initialize)
            {
                //
                //
                //
                //
                //32470FC9-D933-4627-864D-2C02F897871F
                //BEAA475B-2B86-43B9-815A-B94B308334FC

                //Randomly data generated by mockaroo.com

                _persons.Add(new Person()
                {
                    PersonID = Guid.Parse("29AAA26A-2BDC-4FC2-9875-FBAD26D47588"),
                    Name = "Sandra",
                    DateOfBirth = DateTime.Parse("2017-12-04"),
                    Gender = "Female",
                    Address = "3653 Linden Parkway",
                    Email = "srosenthaler0@smh.com.au",
                    ReceiveNewsLetters = true,
                    CountryID = Guid.Parse("A6771060-810D-477B-BF72-68DB2FEC6BE7"),
                });
                _persons.Add(new Person()
                {
                    PersonID = Guid.Parse("8C075184-E967-4A18-BE31-533C2233B774"),
                    Name = "Bernete",
                    DateOfBirth = DateTime.Parse("2021-11-04"),
                    Gender = "Female",
                    Address = "102 Green Road",
                    Email = "bbrear1@csmonitor.com",
                    ReceiveNewsLetters = false,
                    CountryID = Guid.Parse("B852AC49-E73A-484F-9D4B-DF16174D600C")
                });
                _persons.Add(new Person()
                {
                    PersonID = Guid.Parse("BDCD2417-EF1D-4CCE-80FA-935036DB3F77"),
                    Name = "Balduin",
                    DateOfBirth = DateTime.Parse("2021-11-04"),
                    Gender = "Female",
                    Address = "58983 Lukken Way",
                    Email = "bmacy2@wikispaces.com",
                    ReceiveNewsLetters = true,
                    CountryID = Guid.Parse("5CA2AFDE-5418-4DF7-88A7-CD06CFDDC225")
                });
                _persons.Add(new Person()
                {
                    PersonID = Guid.Parse("2DEBF0AE-AF89-4EE3-8D92-862D9BBFB695"),
                    Name = "Birgitta",
                    DateOfBirth = DateTime.Parse("2003-07-21"),
                    Gender = "Male",
                    Address = "47 Bluejay Trail",
                    Email = "bmayoh3@cbslocal.com",
                    ReceiveNewsLetters = true,
                    CountryID = Guid.Parse("07CCF5FF-74FC-4A31-9A6F-A169D26CCD95"),
                });
                _persons.Add(new Person()
                {
                    PersonID = Guid.Parse("32470FC9-D933-4627-864D-2C02F897871F"),
                    Name = "Wilie",
                    DateOfBirth = DateTime.Parse("2004-11-26"),
                    Gender = "Male",
                    Address = "58983 Lukken Way",
                    Email = "wosband4@weebly.com",
                    ReceiveNewsLetters = true,
                    CountryID = Guid.Parse("B1569B9D-A29D-4982-B2C4-C8A007A67D94"),
                });

                //Mockaroo.com
                /*
                          *1 Sandra,srosenthaler0@smh.com.au,2017-12-04,Female,3653 Linden Parkway,true
                           2 Bernete,bbrear1@csmonitor.com,2021-11-04,Female,102 Green Road,false
                           3 Balduin,bmacy2@wikispaces.com,2003-07-21,Male,58983 Lukken Way,true
                           4 Birgitta,bmayoh3@cbslocal.com,2004-11-26,Female,47 Bluejay Trail,true
                           5 Wilie,wosband4@weebly.com,2000-05-20,Female,57559 Dawn Court,true
                           6 Kayla,kspieght5@home.pl,2009-01-11,Female,115 Shasta Point,false
                            Fleur,fovendon6@yolasite.com,2022-04-27,Female,4502 Nova Avenue,true
                            Natalie,nailsbury7@mtv.com,2006-07-05,Female,4492 Vermont Lane,true
                            Harli,hplimmer8@infoseek.co.jp,2021-09-14,Female,3331 Calypso Parkway,true
                            Guillemette,glailey9@nba.com,2014-02-01,Female,59414 Monterey Point,false
                */
            }
        }

        private PersonResponse ConvertPersonToPersonResponse(Person person)
        {
            PersonResponse personResponse = person.ToPersonResponse();
            personResponse.Country = _countriesService.GetCountryByCountryID(person.CountryID)?.CountryName;
            return personResponse;
        }

        public PersonResponse AddPerson(PersonAddRequest? personAddRequest)
        {
            //check if PersonAddRequest is not null
            if(personAddRequest is null)
            {
                throw new ArgumentNullException (nameof(personAddRequest));
            }
            //Validate PersonName
            if (string.IsNullOrEmpty(personAddRequest.PersonName))
            {
                throw new ArgumentException("Person cannot be blank");
            }

            //Model validation 
            ValidationHelper.ModelValidation(personAddRequest);

            //Convert PersonAddRequest into Person type
            Person person = personAddRequest.ToPerson();

            //Generate personID
            person.PersonID = Guid.NewGuid();

            //add person object to persons list
            _persons.Add(person);

            //convert the Person object into PersonResponse
            return ConvertPersonToPersonResponse(person);
            
        }

        public List<PersonResponse> GetAllPersons()
        {
            return _persons.Select(temp => temp.ToPersonResponse()).ToList();
        }

        public PersonResponse? GetPersonByPersonID(Guid? personID)
        {
            if (personID is null)
                return null;

            Person? person = _persons.FirstOrDefault(temp => temp.PersonID == personID);

            if (person is null)
                return null;

            return ConvertPersonToPersonResponse(person);
        }

        public List<PersonResponse> GetFilteredPersons(string searchBy, string? searchString)
        {
            List<PersonResponse> allPersons = GetAllPersons();
            List<PersonResponse> matchingPersons = allPersons;

            if(string.IsNullOrEmpty(searchBy) || string.IsNullOrEmpty(searchString))
                return matchingPersons;

            switch (searchBy)
            {
                case nameof(PersonResponse.PersonName):
                    matchingPersons = allPersons.Where(temp => (!string.IsNullOrEmpty(temp.PersonName) ? temp.PersonName.Contains
                        (searchString, StringComparison.OrdinalIgnoreCase) : true)).ToList();
                    break;

                case nameof(PersonResponse.Email):
                    matchingPersons = allPersons.Where(temp => (!string.IsNullOrEmpty(temp.Email) ? temp.Email.Contains
                        (searchString, StringComparison.OrdinalIgnoreCase) : true)).ToList();
                    break;

                case nameof(PersonResponse.DateOfBirth):
                    matchingPersons = allPersons.Where(temp => (temp.DateOfBirth != null) ? (temp.DateOfBirth.Value.ToString
                        ("dd MMMM yyyy").Contains(searchString, StringComparison.OrdinalIgnoreCase)) : true).ToList();
                    break;

                case nameof(PersonResponse.Gender):
                    matchingPersons = allPersons.Where(temp => (!string.IsNullOrEmpty(temp.Gender) ? temp.Gender.Contains
                        (searchString, StringComparison.OrdinalIgnoreCase) : true)).ToList();
                    break;

                case nameof(PersonResponse.CountryID):
                    matchingPersons = allPersons.Where(temp => (!string.IsNullOrEmpty(temp.Country) ? temp.Country.Contains
                        (searchString, StringComparison.OrdinalIgnoreCase) : true)).ToList();
                    break;

                case nameof(PersonResponse.Address):
                    matchingPersons = allPersons.Where(temp => (!string.IsNullOrEmpty(temp.Address) ? temp.Address.Contains
                        (searchString, StringComparison.OrdinalIgnoreCase) : true)).ToList();
                    break;

                default: matchingPersons = allPersons;
                    break;

            }
            return matchingPersons;
        }

        public List<PersonResponse> GetSortedPersons(List<PersonResponse> allPersons, string sortBy, SortOrderOptions sortOrder)
        {
            if (string.IsNullOrEmpty(sortBy))
                return allPersons;

            List<PersonResponse> sortedPersons = (sortBy, sortOrder) switch
            {
                (nameof(PersonResponse.PersonName), SortOrderOptions.ASC) => allPersons.OrderBy(temp => temp.PersonName, StringComparer.OrdinalIgnoreCase).ToList(),
                (nameof(PersonResponse.PersonName), SortOrderOptions.DESC) => allPersons.OrderByDescending(temp => temp.PersonName, StringComparer.OrdinalIgnoreCase).ToList(),

                (nameof(PersonResponse.Email), SortOrderOptions.ASC) => allPersons.OrderBy(temp => temp.Email, StringComparer.OrdinalIgnoreCase).ToList(),
                (nameof(PersonResponse.Email), SortOrderOptions.DESC) => allPersons.OrderByDescending(temp => temp.Email, StringComparer.OrdinalIgnoreCase).ToList(),

                (nameof(PersonResponse.DateOfBirth), SortOrderOptions.ASC) => allPersons.OrderBy(temp => temp.DateOfBirth).ToList(),
                (nameof(PersonResponse.DateOfBirth), SortOrderOptions.DESC) => allPersons.OrderBy(temp => temp.DateOfBirth).ToList(),

                (nameof(PersonResponse.Age), SortOrderOptions.ASC) => allPersons.OrderBy(temp => temp.Age).ToList(),
                (nameof(PersonResponse.Age), SortOrderOptions.DESC) => allPersons.OrderByDescending(temp => temp.Age).ToList(),

                (nameof(PersonResponse.Gender), SortOrderOptions.ASC) => allPersons.OrderBy(temp => temp.Gender, StringComparer.OrdinalIgnoreCase).ToList(),
                (nameof(PersonResponse.Gender), SortOrderOptions.DESC) => allPersons.OrderByDescending(temp => temp.Gender, StringComparer.OrdinalIgnoreCase).ToList(),

                (nameof(PersonResponse.Country), SortOrderOptions.ASC) => allPersons.OrderBy(temp => temp.Country, StringComparer.OrdinalIgnoreCase).ToList(),
                (nameof(PersonResponse.Country), SortOrderOptions.DESC) => allPersons.OrderByDescending(temp => temp.Country, StringComparer.OrdinalIgnoreCase).ToList(),

                (nameof(PersonResponse.Address), SortOrderOptions.ASC) => allPersons.OrderBy(temp => temp.Address, StringComparer.OrdinalIgnoreCase).ToList(),
                (nameof(PersonResponse.Address), SortOrderOptions.DESC) => allPersons.OrderByDescending(temp => temp.Address, StringComparer.OrdinalIgnoreCase).ToList(),

                (nameof(PersonResponse.ReceiveNewsLetters), SortOrderOptions.ASC) => allPersons.OrderBy(temp => temp.ReceiveNewsLetters).ToList(),
                (nameof(PersonResponse.ReceiveNewsLetters), SortOrderOptions.DESC) => allPersons.OrderByDescending(temp => temp.ReceiveNewsLetters).ToList(),

                _ => allPersons
            };

            return sortedPersons;
        }

        public PersonResponse UpdatePerson(PersonUpdateRequest? personUpdateRequest)
        {
            if (personUpdateRequest == null)
                throw new ArgumentNullException(nameof(personUpdateRequest));

            //Validation
            ValidationHelper.ModelValidation(personUpdateRequest);

            //get matching person object to update

            Person? matchingPerson = _persons.FirstOrDefault(temp => temp.PersonID == personUpdateRequest.PersonID);
            if(matchingPerson == null)
            {
                throw new ArgumentException("Given person id doesn't exist");
            }

            //update all details

            matchingPerson.Name = personUpdateRequest.PersonName;
            matchingPerson.Email = personUpdateRequest.Email;
            matchingPerson.DateOfBirth = personUpdateRequest.DateOfBirth;
            matchingPerson.Gender = personUpdateRequest.Gender.ToString();
            matchingPerson.CountryID = personUpdateRequest.CountryID;
            matchingPerson.Address = personUpdateRequest.Address;
            matchingPerson.ReceiveNewsLetters = personUpdateRequest.ReceiveNewsLetters;

            return ConvertPersonToPersonResponse(matchingPerson);

        }

        public bool DeletePerson(Guid? personID)
        {
            if (personID == null) 
            {
            throw new ArgumentNullException(nameof(personID));
            }

            Person? person = _persons.FirstOrDefault(temp => temp.PersonID == personID);
                if (person is null)
                return false;

            _persons.RemoveAll(temp => temp.PersonID == personID);
                return true;
        }
    }
}
